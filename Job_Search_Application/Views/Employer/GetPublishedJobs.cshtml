@using X.PagedList;
@using X.PagedList.Mvc;
@using X.PagedList.Mvc.Core;
@using System.Linq;
@using System.Web;


@model IPagedList<Job_Search_Application.Models.Jobs_Model>;
@{
    ViewData["Title"] = "Published Job";
}

<br />
<br />
<br />
<div class="col-md-9">
    <form class="d-flex">
        <input class="form-control me-sm-2" type="search" name="searchTerm" placeholder="Job title, part-time...">
        <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
    </form>
</div>
<br />
<br />
<span class="userId" style="display:none;">@ViewBag.CurrentUser</span>
<div class="container shadow" style="background-color: lightblue;">

    <br />

    <h3>Your listings</h3>
    <br />

    <table class="table table-striped table-borderless" style="text-align:center">
        <thead>
            <tr>
                <th>Job Title</th>
                <th>Views</th>
                <th>Applies</th>
                <th style="min-width:150px">Candidates</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                // Access the views for the current job
                var jobViews = ViewBag.JobViews as Dictionary<string, int>;
                // Get the views count for the current job
                int viewsCount = jobViews != null && jobViews.ContainsKey(item.Jobs_Id) ? jobViews[item.Jobs_Id] : 0;
                // Access the applies for the current job
                var jobApplies = ViewBag.JobApplies as Dictionary<string, int>;
                // Get the applies count for the current job
                int appliesCount = jobApplies != null && jobApplies.ContainsKey(item.Jobs_Id) ? jobApplies[item.Jobs_Id] : 0;
                // Access the Reviewed Candidates for the current job
                var reviewedCandidates = ViewBag.ReviewedCandidates as Dictionary<string, int>;
                // Get the Reviewed candidates count for the current job
                int reviewedCandidatesCount = reviewedCandidates != null && reviewedCandidates.ContainsKey(item.Jobs_Id) ? reviewedCandidates[item.Jobs_Id] : 0;
                // Access the Selected candidates for the current job
                var selectedCandidates = ViewBag.SelectedCandidates as Dictionary<string, int>;
                // Get the selected candidates count for the current job
                int selectedCandidatesCount = selectedCandidates != null && selectedCandidates.ContainsKey(item.Jobs_Id) ? selectedCandidates[item.Jobs_Id] : 0;
                // Access the rejected for the current job
                var rejected = ViewBag.Rejected as Dictionary<string, int>;
                // Get the rejected count for the current job
                int rejectedCount = rejected != null && rejected.ContainsKey(item.Jobs_Id) ? rejected[item.Jobs_Id] : 0;
                // Access the withdrawn for the current job
                var withdrawn = ViewBag.Withdrawn as Dictionary<string, int>;
                // Get the withdrawn count for the current job
                int withdrawnCount = withdrawn != null && withdrawn.ContainsKey(item.Jobs_Id) ? withdrawn[item.Jobs_Id] : 0;
                // Access the interviewed Candidates for the current job
                var interviewedCandidates = ViewBag.Interviewed as Dictionary<string, int>;
                // Get the Interviewed candidates count for the current job
                int interviewedCandidatesCount = interviewedCandidates != null && interviewedCandidates.ContainsKey(item.Jobs_Id) ? interviewedCandidates[item.Jobs_Id] : 0;
                // Access the hired candidates for the current job
                var hiredCandidates = ViewBag.Hired as Dictionary<string, int>;
                // Get the Hired candidates count for the current job
                int hiredCandidatesCount = hiredCandidates != null && hiredCandidates.ContainsKey(item.Jobs_Id) ? hiredCandidates[item.Jobs_Id] : 0;
                int activeCandidatedsCount = appliesCount - (rejectedCount + withdrawnCount + hiredCandidatesCount);
                int awaitingReviewCount = appliesCount - reviewedCandidatesCount;
                <tr>
                    <td>
                        <a style="color:aliceblue" class=" job-application" data-job="@item.Title" href="/Employer/All_Requests?jobApplication=@item.Title">@item.Title</a>
                        <br /><p class="text-muted">@item.Job_Location</p>
                        <p class="text-muted">@item.PublishDate.Value.ToShortDateString() - @item.DeactivationDate.Value.ToShortDateString()</p>

                    </td>
                    <td>@viewsCount</td>
                    <td>@appliesCount</td>
                    
                    <td>
                        <span class="multiple-values">
                            <span>@activeCandidatedsCount <br /> Active</span>
                            <span>@awaitingReviewCount   <br />Awaiting Review</span>
                            <span>@reviewedCandidatesCount  <br /> Reviewed</span>
                            <span>@interviewedCandidatesCount  <br /> Interviewed</span>
                            <span>@hiredCandidatesCount   <br />Hired</span>
                           
                        </span>
                    </td>

                
                 
                    <td>
                        <a href="@Url.Action("EditJobs", new { id = item.Jobs_Id })" class="btn btn-primary">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <br />
    <br />
</div>

<div class="pagination">
    @Html.PagedListPager(Model, page => Url.Action("GetPublishedJobs", new { page }))
</div>
